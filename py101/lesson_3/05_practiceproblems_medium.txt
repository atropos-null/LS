Question 1:

Write a program that outputs The Flintstones Rock! 10 times, with each line prefixed by 
one more hyphen than the line above it. The output should start out like this:

My Answer:

text = "The Flinstones Rock!"
symbol = "-"
count = 1

for i in range(10):
    print(symbol*(count)+text)
    count += 1

Real Answer:

for padding in range(1, 11):
    print(f'{"-" * padding}The Flintstones Rock!')

Question 2:

Answer:   while divisor > 0:

Bonus Answer: It determines whether dividing the integer number is by the integer 
divisor leaves a remainder of 0. That is, number % divisor == 0 is truthy if number
 is a factor of divisor.

Question 3:

1st implementation appends/mutates the original list. 2nd implementation 
creates and reassigns a new list.

Question 4:

What's the output?

print(0.3 + 0.6)
print(0.3 + 0.6 == 0.9)

My Answer:
0.9
True

The real Answer:
0.899999999999
False

Trick question! A way around it:

import math

print(0.3 + 0.6)
print(math.isclose(0.3 + 0.6, 0.9))

Question 5:

What do you think the following code will output?
nan_value = float("nan")
print(nan_value == float("nan"))

My Answer: False. Correct!

Bonus: How to test for nan

import math

x = math.nan
print(math.isnan(x))

Remember, you can't use the equality operator (==) to check for NaN because 
NaN is not equal to itself.

Question 6:

What is the output of the following code?

answer = 42
def mess_with_it(some_number):
    return some_number + 8
new_answer = mess_with_it(answer)

print(answer - 8)

My answer: 34

New answer uses answer to inform it and create a new variable while answer
remains untouched to subtract from.

Question 7:

munsters = {
    "Herman": {"age": 32, "gender": "male"},
    "Lily": {"age": 30, "gender": "female"},
    "Grandpa": {"age": 402, "gender": "male"},
    "Eddie": {"age": 10, "gender": "male"},
    "Marilyn": {"age": 23, "gender": "female"},
}

def mess_with_demographics(demo_dict):
    for key, value in demo_dict.items():
        value["age"] += 42
        value["gender"] = "other"

My answer: Everything gets updated. But for a while there I thought it didn't get updated.

Question 8:

def rps(fist1, fist2):
    if fist1 == "rock":
        return "paper" if fist2 == "paper" else "rock"
    elif fist1 == "paper":
        return "scissors" if fist2 == "scissors" else "paper"
    else:
        return "rock" if fist2 == "rock" else "scissors"

print(rps(rps(rps("rock", "paper"), rps("rock", "scissors")), "rock"))

Real answer: paper

The outermost call determines the result of comparing rps(rps("rock", "paper"), 
rps("rock", "scissors")) against rock. That means that we must evaluate the two 
separate calls, rps("rock", "paper") and rps("rock", "scissors"), and combine 
them by calling rps on their results. Those innermost expressions return "paper" 
and "rock", respectively. Calling rps on those two values returns "paper", which, 
when evaluated against "rock", returns "paper".

Question 9

Consider these two simple functions:

def foo(param="no"):
    return "yes"

def bar(param="no"):
    return (param == "no") and (foo() or "no")

bar(foo())

Answer = False

When bar(foo()) is called, the foo function is executed first, returning "yes". 
This return value ("yes") is then passed as the argument to the bar function. 
In bar, the parameter param is now "yes". The expression (param == "no") and (foo() 
or "no") is evaluated as follows:

param == "no" evaluates to False since param is "yes".
Due to the and operator, (foo() or "no") is not executed since the first part of the and 
expression is already False.

Since the left side of the and is False, Python returns False.

Question 10:

Question 10
In Python, every object has a unique identifier that can be accessed using the id() 
function. This function returns the identity of an object, which is guaranteed to be 
unique for the object's lifetime. For certain basic immutable data types like short 
strings or integers, Python might reuse the memory address for objects with the same 
value. This is known as "interning".

Answer = True


In Python, there's a predefined range of integers, specifically from -5 to 256, for 
which memory locations are pre-assigned. When you reference an integer within this span, 
Python consistently points to the same memory spot. This strategy enhances efficiency 
since these particular numbers are commonly utilized in many programming scenarios.

However, when you work with integers outside of this specific range, Python doesn't 
assure that it will consistently point to the same memory address for identical values 
across different variables.