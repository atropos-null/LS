What does pass by "value" mean?

In C, when you "pass by value", the function only has a copy of the original object. 
Operations performed on the object within the function have no effect on the original 
object outside of the function.

If Python was pure "pass by value", that means there should be no way for operations 
within a function to cause changes to the original object. This implies that Python is 
"pass by reference", since operations within the function affected the original object.
However, not all operations affect the original object. 

Python exhibits a combination of behaviors from both "pass by reference" as well as "pass 
by value". Its behavior is described as pass by object reference as you are actually 
passing a reference to the object (value) rather than a copy of the object itself. 
However, whether the function can modify the object depends on whether the object is 
mutable or immutable.

The important thing to remember is that Python always passes references to objects, not 
the objects themselves. The distinction between mutable and immutable types in Python 
then dictates whether you can modify the original object through that reference.

When an operation within the function mutates the argument, it will affect the original 
object.

Restated via LSBOT:

These are two different parameter passing mechanisms that can cause confusion because 
they sound similar but behave differently.

Pass-by-Reference
In true pass-by-reference (found in languages like C++), the function parameter becomes 
an alias for the original variable. This means:
•   Any operation on the parameter (including reassignment) affects the original variable
•   You're passing a reference to the variable itself, not just to the value it contains

Pass-by-Object-Reference (Python's model)
In Python's pass-by-object-reference:
•   Python passes a reference to the object that a variable points to
•   The parameter becomes a new variable that references the same object
•   Reassigning the parameter will not affect the original variable
•   Mutating the object (if mutable) will affect all variables that reference it