~

COMMAND LINE CHEAT SHEET

cd	    Change directory.
ls	    List files and directories in current directory. Flag -l, -a, -h to get more info, (-lah)   
pwd	    Display the path of the current directory.
touch	Create a file.
mkdir	Create a directory.
rm	    Remove a file or directory. Warning: deleting a file or directory with this command is permanent!
cp	    Copy a file or directory.
mv	    Move or rename a file or directory.
echo	Print text to STDOUT.  Flag: -n, o"Do not print the trailing newline character." Goes in middle after command.
cat	    Display contents of a file.
more	Display contents of a file, starting at the top and letting the user scroll down.
less	Display contents of a file in an even more interactive way.
head	Display the first part of a file.
tail	Display the last part of a file.
man	    Display documentation about a command. Type q to exit.


tar: an archival command that can archive, compress, and extract files
    flags: -c (create), -z (zip), -f (file), -czf -a (hidden files)

To get home without a tilde: $HOME represents the path to your home directory. 

Go to the route directory: cd /

The which command in the terminal shows the path of the executable that would have been executed when you type a command. 
For example, which python will display the path to the Python interpreter that will be used when you run python.

GIT CHEAT SHEET 

# Clone a Repository
git clone <repository_url>

# Creates a new repository in the current directory. Generates a .git directory.
git init 

# Add an existing remote repo as a remote of existing local repo.
git remote add origin <repository_url>

# Sets git configuration settings, such as author email and name.
git config

# Stage Changes for Commit
git add <file(s)>
git add . "Adds all the files in the staging area"

# Commit Changes
git commit -m "Commit message"
git commit amend 

# Push Changes to the Remote Repository
git push

# Force Push Changes (use with caution)
git push --force

# Reset Working Directory to Last Commit
git reset --hard

# Create a New Branch
git branch <branch_name>
    flags: -d deletes the branch 

# Switch to a Different Branch
git checkout <branch_name>

# Merge Changes from Another Branch
git merge <branch_name>

# Rebase Changes onto Another Branch (use with caution)
git rebase <base_branch>

# View Status of Working Directory
git status

# View Commit History
git log 
flags: -- oneline, statq

# Undo Last Commit (use with caution)
git reset --soft HEAD^

# Discard Changes in Working Directory
git restore <file(s)>

# Retrieve Lost Commit References
git reflog

# Interactive Rebase to Rearrange Commits
git rebase --interactive HEAD~3

# Pull changes from remote repo
git pull <remote_name> <branch_name>
git pull --ff-only origin main   * if you want to specify exactly from which remote repository 
(using the alias) and which remote branch you want to pull.

# Fetch changes from remote repo
git fetch <remote_name>

If you have already issued a git fetch, you can use git merge --ff-only rather than git pull --ff-only. 
Essentially, git pull --ff-only combines git fetch and git merge --ff-only into one command.

# Ignoring Files (privacy, etc. in this example a database)
    In command line: touch .gitignore
    In the file that you are about to open: ~/git_basics/.gitignore
    In the text editor: 
        # Ignore all SQLite databases
        db/*.sqlite3
        .DS_Store

    Avoid global flags!



# Git Identity
    git config --global user.name "name"
    git config --global user.email "email"

# Changes to a repository  
git diff 

# If not using codespaces, initialize by 
    mkdir git_basics
    cd git_basics
    echo '# README #' > README.md
    echo '# LICENSE #' > LICENSE.md
    git config --global init.defaultBranch main
    git init

    Do not nest your repositories!


